{"version":3,"file":"component---src-pages-kiosk-js-e38b1c4d2128c25ab48f.js","mappings":"gHAEIA,EAAyB,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBF,EAAuB,EAAQ,OAChDG,EAAc,EAAQ,MACtBC,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,2MACD,cACJN,EAAQ,EAAUG,C,2LCRdI,EAAU,KAEQ,oBAAXC,SACTD,E,MAAUE,GAAAA,QAAU,CAClBC,KAAK,wnBACLC,UAAW,GACXC,SAAU,CAAC,GAAI,OAqBnB,MAjBuBC,IAAA,IAAC,IAAEC,EAAG,KAAEC,GAAMF,EAAA,OACnCG,EAAAA,cAACC,EAAAA,EAAY,CACXC,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CAACN,EAAKC,GACdM,KAAM,GACNC,iBAAiB,GAEjBN,EAAAA,cAACO,EAAAA,EAAS,CACRC,YAAY,mLACZC,IAAI,MACJC,IAAI,qEAGNV,EAAAA,cAACW,EAAAA,EAAM,CAACC,SAAU,CAACd,EAAKC,GAAOc,KAAMtB,IACxB,E,OC6DV,SAASuB,EAAsBC,GAElC,IAAIC,EAAsB,CACtBC,OAAQ,GACRC,OAAQ,GACRC,QAAS,GACTC,UAAW,GACXC,SAAU,GACVC,OAAQ,GACRC,SAAU,IAEd,OAAkB,MAAdR,GAA2C,GAArBA,EAAWS,OAC1B,MAGPT,EAAWU,SAAQ,SAAUC,GApCrC,IAAwBC,EAAUC,EAqCtBZ,EAAoBU,EAAQG,KAAKC,MArCrBH,EAqCyCD,EAAQC,SArCvCC,EAqCiDF,EAAQE,UApCtE,CACbD,SAAUA,EACVC,UAAWA,KAmCPZ,EAAoBU,EAAQG,KAAKE,MAAK,CAACC,EAAGC,IAClCD,EAAEL,SAAS,GAAKM,EAAEN,SAAS,IACnB,EAERK,EAAEL,SAAS,GAAKM,EAAEN,SAAS,GACpB,EAEJ,GAEf,IAEOX,EAEf,CArHAkB,KAAKC,UAAUC,SAAW,SAAUC,GAEhC,OADAC,KAAKC,QAAQD,KAAKE,UAAiB,GAAJH,EAAS,GAAK,KACtCC,IACX,EAgPO,SAASG,EAAmBC,EAAKlB,GAEpC,IADA,IAAImB,EAAI,GAAKD,EACNC,EAAEnB,OAASA,GACdmB,EAAI,IAAMA,EAEd,OAAOA,CACX,C,cCtPC,MA2CKC,EAAkB,SAASC,EAAOC,GACpC,IAAIC,EAAgB,GAEpB,GAAa,MAATF,GAAiC,GAAhBA,EAAMrB,OACvBuB,EAAcjB,KAAK9B,EAAAA,cAAA,QAAMgD,IAAK,GAAI,qBAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMrB,OAAQyB,IAC9BF,EAAcjB,KAAK9B,EAAAA,cAAA,QACfgD,IAAKC,GAAIC,EAAwCL,EAAMI,GAAGtB,SAAS,GAAI,GAAK,IAAMuB,EAAwCL,EAAMI,GAAGtB,SAAS,GAAI,GAAK,MAAQuB,EAAwCL,EAAMI,GAAGrB,UAAU,GAAI,GAAK,IAAMsB,EAAwCL,EAAMI,GAAGrB,UAAU,GAAI,KAIlT,OAAOmB,CACX,EAMA,MAJmB,SAAAlD,GAAuB,IAAd,WAACkB,GAAWlB,EACpC,OA3DuB,SAASkB,GAChC,IAAI8B,EAEJ,GADAA,EAAQK,EAA2CnC,GACjC,MAAdA,GAA2C,GAArBA,EAAWS,OAIrC,OACIxB,EAAAA,cAAA,WACIA,EAAAA,cAAA,aACIA,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,UACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAM3B,UAEpElB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,YACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAM1B,WAEpEnB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,YACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAMzB,aAEpEpB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,cACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAMxB,YAEpErB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,WACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAMvB,UAEpEtB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,WACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAMtB,YAEpEvB,EAAAA,cAAA,UACIA,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,WAA6B,WACxCnD,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,WAAAA,YAA+BP,EAAgBC,EAAM5B,WAKpF,CAkBWmC,CAAkBrC,EAC7B,E,UCvDA,MAwDasC,EAAOA,IAAMrD,EAAAA,cAAA,aAAO,iBAEjC,MA1DwBH,IAAiB,IAAhB,SAACyD,GAASzD,EAE/B,IAAI0D,EADW,IAAIC,gBAAgBF,EAASG,QACvBC,IAAI,MACzB,MAAMC,EAAQC,EAAAA,MAAeC,GAAQA,EAAKN,UAAYA,IAEtD,IAAIO,EACAH,GAASA,EAAMI,UACjBD,EAAcH,EAAMI,QAAQC,OAAS,IAAML,EAAMI,QAAQE,QAE3D,MAAMC,EAAiB,yEAA2EJ,EAE5FK,EAAiBA,MACrBC,EAAAA,EAAAA,UAASF,EAAe,EAG5B,GAAIP,EACF,OACE3D,EAAAA,cAACqE,EAAAA,EAAM,CAACC,UAAU,iBACdtE,EAAAA,cAACuE,EAAc,CAACzE,IAAK6D,EAAMI,QAAQC,OAAQjE,KAAM4D,EAAMI,QAAQE,SAC/DjE,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBACVnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,WAAmCQ,EAAMa,MACrDxE,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,eAAsC,eAChDnD,EAAAA,cAAA,QAAME,MAAOiD,EAAAA,GAAAA,gBAAAA,oBACVQ,EAAMc,UAAUC,MAAKb,GAAqB,OAAbA,EAAKc,MACnC3E,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,QAA+B,UAC3CnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,UAAiC,aAGjDnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,aAAqCQ,EAAMiB,cAEzD5E,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,UACXnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBACVnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,eAAsC,kBACrB,IAA5BQ,EAAM5C,WAAWS,OACdxB,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,aAAoC,kCAChDnD,EAAAA,cAAC6E,EAAU,CAAC9D,WAAY4C,EAAM5C,cAGpCf,EAAAA,cAAA,MAAIE,MAAOiD,EAAAA,GAAAA,UACXnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBACVnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,eAAsC,WAClDnD,EAAAA,cAAA,OAAKE,MAAOiD,EAAAA,GAAAA,gBAAAA,aAAqCQ,EAAMI,QAAQe,OAAO,IAAEnB,EAAMI,QAAQgB,OAAO,KAAGpB,EAAMI,QAAQiB,MAC9GhF,EAAAA,cAACiF,EAAAA,EAAU,CACTC,MAAM,UACNC,QAAShB,GAETnE,EAAAA,cAACoF,EAAAA,EAAU,OAEbpF,EAAAA,cAAA,QAAME,MAAOiD,EAAAA,GAAAA,cAAqB,oBAK5C,C,wDC/DK,MAGMA,EAAS,CAClBkC,eAAgB,CACZC,WAAY,GACZC,YAAa,IAEjBC,QAAS,CACLC,UAAW,mBACXC,aAAc,OAElBC,KAAK,CACDT,MAAO,QAEXU,aAAa,CACTV,MAAO,WAEXnE,WAAY,CACR8E,UAAW,CACPC,SAAU,SAEdC,WAAY,CACRb,MAAO,SAGfc,gBAAiB,CACbC,UAAW,CACPC,SAAU,GACVC,WAAY,OACZC,WAAY,IAEhBrF,WAAY,CACRsF,YAAa,CACTC,KAAM,EACNC,cAAe,OAEnBC,YAAY,CACRN,SArCkB,GAsClBX,YAAa,EACbO,SAAU,KAGlBW,cAAe,CACXL,WAAY,GACZM,cAAe,GACfR,SA7CsB,GA8CtBC,WAAY,OACZQ,QAAS,SAEbC,mBAAoB,CAChBT,WAAY,SACZU,MAAO,SAEXC,YAAa,CACTJ,cAAe,GACfR,SAvDsB,GAwDtBhB,MAAO,QAEX6B,SAAS,CACLL,cAAe,GACfxB,MAAO,OAEX8B,OAAQ,CACJN,cAAe,GACfxB,MAAO,U","sources":["webpack://hopfenstop/./node_modules/@mui/icons-material/Directions.js","webpack://hopfenstop/./src/components/kiosk_detail_view/kiosk_map_header.js","webpack://hopfenstop/./src/helper/date_time.js","webpack://hopfenstop/./src/components/kiosk_detail_view/kiosk_times.js","webpack://hopfenstop/./src/pages/kiosk.js","webpack://hopfenstop/./src/styles.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m21.41 10.59-7.99-8c-.78-.78-2.05-.78-2.83 0l-8.01 8c-.78.78-.78 2.05 0 2.83l8.01 8c.78.78 2.05.78 2.83 0l7.99-8c.79-.79.79-2.05 0-2.83zM13.5 14.5V12H10v3H8v-4c0-.55.45-1 1-1h4.5V7.5L17 11l-3.5 3.5z\"\n}), 'Directions');\nexports.default = _default;","import React from 'react';\nimport { MapContainer, TileLayer, Marker } from 'react-leaflet';\nimport L from 'leaflet';\n\nvar svgIcon = null;\n\nif (typeof window !== 'undefined') {\n  svgIcon = L.divIcon({\n    html: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" viewBox=\"0 96 960 960\" width=\"48\"> <path stroke-width=\"0\" fill=\"#e9b11b\" d=\"m482,870q-12,0 -21,-7t-13,-18q-24,-73 -60,-121t-70,-92q-34,-44 -58,-91.5t-24,-118.5q0,-103 71.5,-174.5t174.5,-71.5q103,0 174.5,71.5t71.5,174.5q0,71 -24,118.5t-58,91.5q-34,44 -70,92t-60,121q-4,11 -13,18t-21,7z\" id=\"svg_1\" stroke=\"#e9b11b\"/> <path fill=\"#ffffff\" stroke-width=\"0\" id=\"svg_2\" d=\"m479.00119,495.49981c-33.9779,0 -61.5,-27.5221 -61.5,-61.5c0,-33.9779 27.5221,-61.5 61.5,-61.5c33.9779,0 61.5,27.5221 61.5,61.5c0,33.9779 -27.5221,61.5 -61.5,61.5z\" opacity=\"undefined\" stroke=\"#e9b11b\"/></svg>`,\n    className: '',\n    iconSize: [34, 44],\n  });\n}\n\nconst KioskHeaderMap = ({ lat, long }) => (\n  <MapContainer\n    style={{ height: '250px' }}\n    center={[lat, long]}\n    zoom={16}\n    scrollWheelZoom={false}\n  >\n    <TileLayer\n      attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors'\n      ext='png'\n      url='https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png'\n    />\n\n    <Marker position={[lat, long]} icon={svgIcon}></Marker>\n  </MapContainer>\n);\n\nexport default KioskHeaderMap;\n","import moment from \"moment\";\n\nDate.prototype.addHours = function (h) {\n    this.setTime(this.getTime() + (h * 60 * 60 * 1000));\n    return this;\n}\n\nexport function formatDate(date) {\n    var monthNames = [\n        'Januar',\n        'Februar',\n        'März',\n        'April',\n        'Mai',\n        'Juni',\n        'Juli',\n        'August',\n        'September',\n        'Oktober',\n        'November',\n        'Dezember',\n    ];\n    var dayNames = [\n        'Sonntag',\n        'Montag',\n        'Dienstag',\n        'Mittwoch',\n        'Donnerstag',\n        'Freitag',\n        'Samstag',\n    ];\n\n\n    var dateD = date.getDate();\n    var dayIndex = date.getDay();\n    var monthIndex = date.getMonth();\n    var year = date.getFullYear();\n\n    return dayNames[dayIndex] + ', ' + dateD + '. ' + monthNames[monthIndex] + ' ' + year;\n}\n\nexport function formatTime(d) {\n\n    let date = new Date(d);\n    let stringTime = date.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}).replace(/(:\\d{2}| [AP]M)$/, \"\");\n    return stringTime;\n}\n\n/*\n * 1. conversion from java to javascript date format\n * 2. umrechnen in lokale Zeitzone!\n * */\nexport function convertFromBackendTime(backendDate) {\n\n    var appDate = new Date(backendDate * 1000);\n    //convert UTC to local time : https://stackoverflow.com/questions/6525538/convert-utc-date-time-to-local-date-time-using-javascript\n    let localDate = new Date(appDate.getTime() + appDate.getTimezoneOffset() * 60 * 1000)\n\n    return localDate;\n}\n\nexport function convertFromBackendTimeWithoutTimezone(backendDate) {\n    return new Date(backendDate * 1000);\n}\n\n/*\n Constructor für TimeObject. Sicherstellen der Datenstruktur\n */\nfunction makeTimeObject(openTime, closeTime) {\n    var timeObject = {\n        openTime: openTime,\n        closeTime: closeTime\n    }\n    return timeObject\n}\n\n/*\n Umwandlung in Minuten um vergleichen zu können\n */\nfunction makeComparableTimeObject(hours, minutes) {\n\n    return hours * 60 + minutes\n}\n\n/*\n Funktion setzt zeitdaten vom server in anderes Datenformat zusammen.\n Mehrere Zeitblöcke aus einnem Tag werden zu einem zusammengefasst.\n Dabei wird die frühste Startzeit und die späteste Endzeit genommen.\n */\nexport function getFormatedKioskTimes(kioskTimes) {\n    //zugriff auf öffnungszeiten an einem Tag per Tagesnamen formattedKioskTimes[<TagesName>]\n    let formattedKioskTimes = {\n        SUNDAY: [],\n        MONDAY: [],\n        TUESDAY: [],\n        WEDNESDAY: [],\n        THURSDAY: [],\n        FRIDAY: [],\n        SATURDAY: []\n    }\n    if (kioskTimes == null || kioskTimes.length == 0) {\n        return null\n    }\n    else {\n        kioskTimes.forEach(function (element) {\n            formattedKioskTimes[element.day].push(makeTimeObject(element.openTime, element.closeTime))\n            formattedKioskTimes[element.day].sort((a, b)=> {\n                if (a.openTime[0] < b.openTime[0]) {\n                    return -1;\n                }\n                if (a.openTime[0] > b.openTime[0]) {\n                    return 1;\n                }\n                return 0;\n            })\n        })\n\n        return formattedKioskTimes\n    }\n}\n\nexport var daysEnum = {\n    0: \"SUNDAY\",\n    1: \"MONDAY\",\n    2: \"TUESDAY\",\n    3: \"WEDNESDAY\",\n    4: \"THURSDAY\",\n    5: \"FRIDAY\",\n    6: \"SATURDAY\"\n}\n\nexport var dayReverseEnum = {\n    \"SUNDAY\": 0,\n    \"MONDAY\": 1,\n    \"TUESDAY\": 2,\n    \"WEDNESDAY\": 3,\n    \"THURSDAY\": 4,\n    \"FRIDAY\": 5,\n    \"SATURDAY\": 6\n}\n/*\n returns true wenn offen, false wenn zu, null wenn keine Daten vorliegen\n */\nexport function isKioskOpenNow(kioskTimes) {\n    let formattedKioskTimes = getFormatedKioskTimes(kioskTimes)\n    if (formattedKioskTimes == null) {\n        return null\n    }\n\n    prepareKioskTimes(formattedKioskTimes)\n\n    let date = new Date()\n    let dayTodayIndex = date.getDay();\n    let dayToday = daysEnum[dayTodayIndex]\n\n    let nowComparableTime = makeComparableTimeObject(date.getHours(), date.getMinutes())\n\n    let todaysOpenTimes = [];\n    todaysOpenTimes = formattedKioskTimes[dayToday];\n\n    //kiosk by default geschlossen, wenn ein \"ÖffnungsTimeSlice\" matched, wird er \"geöffnet\"\n    let open = \"CLOSED\"\n    todaysOpenTimes.forEach(function (element) {\n        let kioskOpenComparableTime = makeComparableTimeObject(element.openTime[0], element.openTime[1])\n        let kioskCloseComparableTime = makeComparableTimeObject(element.closeTime[0], element.closeTime[1])\n\n        //wenn öffnungszeit mehr als schließzeit, dann ist es über 0:00 hinaus, dann +1 Tag das der Vergleich funktioniert\n        if (kioskOpenComparableTime > kioskCloseComparableTime) {\n            kioskCloseComparableTime = kioskCloseComparableTime + 24 * 60\n        }\n\n        if (nowComparableTime >= kioskOpenComparableTime && nowComparableTime < kioskCloseComparableTime) {\n            open = \"OPEN\"\n            if (kioskCloseComparableTime - nowComparableTime < 30 && !iskiosk24h(formattedKioskTimes)) {\n                open = \"CLOSINGSOON\"\n            }\n        }\n\n        if(element.openTime[0] == 0 && element.openTime[1] == 0 && element.closeTime[0] == 0 && element.closeTime[1] == 0){\n            open = \"OPEN\"\n        }\n    })\n\n    return open\n}\n\n/**\n * Bei Kiosken die an 2 aufeinanderfolgenden Tagen von 00: 00  - 23:59  geöffnet haben sollte\n * nicht schließt bald angezeigt werden.\n * */\nfunction iskiosk24h(formattedKioskTimes){\n    let date = new Date()\n    let dayTodayIndex = date.getDay();\n    let dayToday = daysEnum[dayTodayIndex]\n\n    var returnValue = false\n\n    let todaysOpenTimes = formattedKioskTimes[dayToday];\n    todaysOpenTimes.forEach(function (element){\n        if(element.closeTime[0] == 23 && element.closeTime[1] == 59){\n            let dayTomorrow = daysEnum[(dayTodayIndex + 1) % 7]\n            let tomorrowOpenTimes = formattedKioskTimes[dayTomorrow]\n            tomorrowOpenTimes.forEach(function (subElement){\n                if(subElement.openTime[0] == 0 && subElement.openTime[1] == 0){\n                    returnValue = true\n                }\n            })\n        }\n    })\n    return returnValue\n}\n\n/*\n * Macht Öffnungszeit Samstag: 10:00am - 2:00am zu Samstag 10:00 - 00:00 && Sonntag 00:00 - 2:00am\n * */\nfunction prepareKioskTimes(formattedKioskTimes) {\n\n    for (let day in formattedKioskTimes) {\n        formattedKioskTimes[day].forEach(function (timeslice){\n            let kioskOpenComparableTime = makeComparableTimeObject(timeslice.openTime[0], timeslice.openTime[1])\n            let kioskCloseComparableTime = makeComparableTimeObject(timeslice.closeTime[0], timeslice.closeTime[1])\n            if (kioskOpenComparableTime > kioskCloseComparableTime && kioskCloseComparableTime != 0) {\n                let dayToPushTimeslice = daysEnum[(dayReverseEnum[day] + 1) % 7]\n                formattedKioskTimes[dayToPushTimeslice].push({openTime:[0,0], closeTime: timeslice.closeTime})\n            }\n        })\n    }\n}\n\n/*\n * returns Array von \"TimeObjekten\"\n * */\nexport function getOpenTimesToday(kioskTimes) {\n    var formattedKioskTimes = getFormatedKioskTimes(kioskTimes)\n    if (formattedKioskTimes == null) {\n        //null -> keine öffnungszeiten vorhanden.\n        return null\n    }\n    var date = new Date()\n    var dayTodayIndex = date.getDay();\n    var dayToday = daysEnum[dayTodayIndex]\n\n    return formattedKioskTimes[dayToday]\n}\n\nexport function formatNumberLength(num, length) {\n    var r = \"\" + num;\n    while (r.length < length) {\n        r = \"0\" + r;\n    }\n    return r;\n}\n\n","import React from \"react\"\nimport { MapContainer, TileLayer, Marker } from \"react-leaflet\"\nimport * as dateAndTimeFunctions from '../../helper/date_time'\nimport { styles } from '../../styles'\n\n const showOpenTimesWeek = function(kioskTimes) {\n    let times;\n    times = dateAndTimeFunctions.getFormatedKioskTimes(kioskTimes);\n    if (kioskTimes == null || kioskTimes.length == 0) {\n        return;\n    }\n\n    return (\n        <div>\n            <table>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Montag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.MONDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Dienstag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.TUESDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Mittwoch</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.WEDNESDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Donnerstag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.THURSDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Freitag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.FRIDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Samstag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.SATURDAY)}</td>\n                </tr>\n                <tr>\n                    <td style={styles.kioskTimes.dayColumn}>Sonntag</td>\n                    <td style={styles.kioskTimes.timeColumn}>{formatFromUntil(times.SUNDAY)}</td>\n                </tr>\n            </table>\n        </div>\n    )\n}\n\nconst formatFromUntil = function(times, type) {\n    let textOpenTimes = []\n\n    if (times == null || times.length == 0) {\n        textOpenTimes.push(<span key={0}>{'geschlossen'}</span>)\n    } else {\n        for (let i = 0; i < times.length; i++) {\n            textOpenTimes.push(<span\n                key={i}>{dateAndTimeFunctions.formatNumberLength(times[i].openTime[0], 2) + \":\" + dateAndTimeFunctions.formatNumberLength(times[i].openTime[1], 2) + \" - \" + dateAndTimeFunctions.formatNumberLength(times[i].closeTime[0], 2) + \":\" + dateAndTimeFunctions.formatNumberLength(times[i].closeTime[1], 2)}</span>)\n        }\n    }\n\n    return textOpenTimes\n}\n\nconst KioskTimes = function({kioskTimes}){\n    return showOpenTimesWeek(kioskTimes)\n}\n\nexport default KioskTimes","import * as React from 'react'\nimport IconButton from '@mui/material/IconButton';\nimport Directions from '@mui/icons-material/Directions';\nimport Layout from '../components/layout'\nimport kioskData from \"../data/kiosk_data.json\"\nimport KioskHeaderMap from '../components/kiosk_detail_view/kiosk_map_header'\nimport KioskTimes from '../components/kiosk_detail_view/kiosk_times'\nimport { styles } from '../styles'\nimport { navigate } from 'gatsby';\n\nconst KioskDetailView = ({location}) => {\n    const params = new URLSearchParams(location.search);\n    var kioskId = params.get('id')\n    const kiosk = kioskData.find(item => item.kioskId === kioskId);\n\n    let coordinates;\n    if (kiosk && kiosk.address) {\n      coordinates = kiosk.address.geolat + ',' + kiosk.address.geolng;\n    }\n    const navigationLink = 'https://www.google.com/maps/dir/?api=1&travelmode=walking&destination=' + coordinates;\n\n    const handleNavigate = () => {\n      navigate(navigationLink);\n    };\n\n  if (kiosk){\n    return (\n      <Layout pageTitle=\"Kiosk Details\">\n          <KioskHeaderMap lat={kiosk.address.geolat} long={kiosk.address.geolng}/>\n          <div style={styles.contentWrapper}>\n            <div style={styles.kioskDetailView.kioskName}>{kiosk.name}</div>\n            <div style={styles.kioskDetailView.sectionHeader}>Beschreibung\n              <span style={styles.kioskDetailView.sectionHeaderRight}>\n                {kiosk.kioskTags.find(item => item.tag === 'WC') ?\n                <div style={styles.kioskDetailView.toilet}>Mit WC</div> :\n                <div style={styles.kioskDetailView.noToilet}>Kein WC</div>}\n              </span>\n            </div>\n            <div style={styles.kioskDetailView.sectionText}>{kiosk.description}</div>\n          </div>\n          <hr style={styles.divider}></hr>\n          <div style={styles.contentWrapper}>\n            <div style={styles.kioskDetailView.sectionHeader}>Öffnungszeiten</div>\n            {kiosk.kioskTimes.length === 0 ?\n                <div style={styles.kioskDetailView.sectionText}>Keine Öffnungszeiten vorhanden</div> :\n                <KioskTimes kioskTimes={kiosk.kioskTimes}/>\n            }\n          </div>\n          <hr style={styles.divider}></hr>\n          <div style={styles.contentWrapper}>\n            <div style={styles.kioskDetailView.sectionHeader}>Adresse</div>\n            <div style={styles.kioskDetailView.sectionText}>{kiosk.address.street} {kiosk.address.number}, {kiosk.address.city}</div>\n            <IconButton\n              color='primary'\n              onClick={handleNavigate}\n            >\n              <Directions />\n            </IconButton>\n            <span style={styles.callToAction}>Route zum Kiosk</span>\n          </div>\n\n      </Layout>\n    )\n  }\n}\n\nexport const Head = () => <title>Kiosk Details</title>\n\nexport default KioskDetailView","export const PRIMARY_COLOR = \"#e0ab16\"\nexport const STANDARD_FONT_SIZE = 16\n\nexport const styles = {\n    contentWrapper: {\n        marginLeft: 20,\n        marginRight: 20\n    },\n    divider: {\n        borderTop: '0.5px solid #bbb',\n        borderBottom: '0px'\n    },\n    grey:{\n        color: 'grey'\n    },\n    callToAction:{\n        color: '#007aff'\n    },\n    kioskTimes: {\n        dayColumn: {\n            minWidth: '110px'\n        },\n        timeColumn: {\n            color: 'grey'\n        }\n    },\n    kioskDetailView: {\n        kioskName: {\n            fontSize: 20,\n            fontWeight: 'bold',\n            paddingTop: 15\n        },\n        kioskTimes: {\n            viewWeekDay: {\n                flex: 0,\n                flexDirection: \"row\"\n            },\n            textWeekDay:{\n                fontSize: STANDARD_FONT_SIZE,\n                marginRight: 5,\n                minWidth: 80,\n            },\n        },\n        sectionHeader: {\n            paddingTop: 10,\n            paddingBottom: 10,\n            fontSize: STANDARD_FONT_SIZE,\n            fontWeight: 'bold',\n            display: 'block'\n        },\n        sectionHeaderRight: {\n            fontWeight: 'normal',\n            float: 'right'\n        },\n        sectionText: {\n            paddingBottom: 10,\n            fontSize: STANDARD_FONT_SIZE,\n            color: 'grey'\n        },\n        noToilet:{\n            paddingBottom: 10,\n            color: 'red',\n        },\n        toilet: {\n            paddingBottom: 10,\n            color: 'green',\n        }\n    }\n}"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","svgIcon","window","L","html","className","iconSize","_ref","lat","long","React","MapContainer","style","height","center","zoom","scrollWheelZoom","TileLayer","attribution","ext","url","Marker","position","icon","getFormatedKioskTimes","kioskTimes","formattedKioskTimes","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","length","forEach","element","openTime","closeTime","day","push","sort","a","b","Date","prototype","addHours","h","this","setTime","getTime","formatNumberLength","num","r","formatFromUntil","times","type","textOpenTimes","key","i","dateAndTimeFunctions","styles","showOpenTimesWeek","Head","location","kioskId","URLSearchParams","search","get","kiosk","kioskData","item","coordinates","address","geolat","geolng","navigationLink","handleNavigate","navigate","Layout","pageTitle","KioskHeaderMap","name","kioskTags","find","tag","description","KioskTimes","street","number","city","IconButton","color","onClick","Directions","contentWrapper","marginLeft","marginRight","divider","borderTop","borderBottom","grey","callToAction","dayColumn","minWidth","timeColumn","kioskDetailView","kioskName","fontSize","fontWeight","paddingTop","viewWeekDay","flex","flexDirection","textWeekDay","sectionHeader","paddingBottom","display","sectionHeaderRight","float","sectionText","noToilet","toilet"],"sourceRoot":""}